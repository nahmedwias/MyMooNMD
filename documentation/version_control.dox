/**
 * \page page_version_control Version control
 *
 * Here we describe the basic workflow when using and extending MooN
 *
 * 
  \section extensions Mercurial extensions

  \subsection enabling Enabling extensions
  Every mercurial installation comes with a configuration file. It is named .hgrc,
  and when on Linux you should find it in your home directory. This is the place
  to customize your mercurial distribution. In particular this is where you can enable
  mercurial extensions.
  Extensions ship with mercurial, but are not consider core functionality for one
  reason or the other. Using them is an act of volition, and you have to enable them.

  In your .hgrc file, set the line
  \code
  [extensions]
  shelve =
  \endcode
  to enable e.g. the shelve extension. This allows the usage of the "hg shelve"
  command in all your local mercurial repositories. Other extensions can be enabled
  the same way - just list them under the [extensions] heading.
  Should you want to enable an extension only for a particular project, do the above
  in the projects .hg/hgrc file instead of in the global configuration file.

  \subsection shelve hg shelve

  The shelve extension is enabled by adding the line
  \code
    shelve =
  \endcode
  under the [extensions] heading in your global or local hgrc file.
  Note that you will have to run mercurial 2.8 or higher for the shelve extension to work.

  The shelve can be used to put aside uncommited changes in your working directory which you do not want to commit yet.
  Put uncommited changes aside with
  \code
    hg shelve
  \endcode
  and get them back to your working directory with
  \code
    hg unshelve
  \endcode
  Note that you can have more than one shelve and all your shelves have names. The default name is just the
  name of the branch you are currently working in (eventually with sequential numbers added, should you happen
  to have more than one shelve per branch). To shelve changes with a custom name, e.g. "bugfixes" run,
  \code  
    hg shelve --name bugfixes
  \endcode
  and unshelve these with 
  \code
    hg unshelve bugfixes
  \endcode
  
  The reasons for having uncommited changes in your working directory can be manifold.
  But to my best knowledge there are basically two situations when these are in your way. Those are
  
  \arg You want to switch between branches \n
  When you want to switch from branch A to branch B, the uncommited changes in your working
  directory get "rebased". This means, that their parent (e.g. the head of branch A) is replaced
  by the head of branch B. This rebasing is not always desirable nor feasible. Mercurial might just
  abort the update if there are uncommited changes (to force this aborting behavior run hg update
  with the option "-c"). To work around these problems you must either commit all of your changes
  or shelve them. It's up to you.
  
  
  \arg You want to merge some other changeset into your current working directory \n
  A merge gets always aborted if there are uncommited changes. So the workflow is:
  shelve, merge, unshelve.

\remarks The shelve extension can be used to move changesets between branches, but this is a delicate matter
and I suppose a lot of things could go wrong there. When e.g. the shelved changes from branch A refer to
a file which is not present in branch B it might be a bad idea to unshelve the branch A changes in branch B.

Should you discover other situations where the shelve extension is useful or dangerous, please feel free to share them.

 
 
 */



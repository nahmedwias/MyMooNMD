/**
 * \page page_version_control Version control
 * \author Clemens Bartsch <bartsch@wias-berlin.de>
   \date 2015/09/30
 * \brief This is a collection of tips for hg mercurial, loosely ParMooN related
 *
  \tableofcontents
  
  \section introduction Introduction
  ParMooN uses the version control system hg mercurial, which is highly portable and rather safe and efficient when used correctly.
  Mercurial is a distributed version control system. A general introduction and links for further reading can be found on Juergen Fuhrmann's
  homepage <a href="http://www.wias-berlin.de/people/fuhrmann/2014-10-30-mercurial.html">here</a>.\n
  
  This page is set up in order to give some additional information which we consider useful.
  
  \remarks
  Distributed version control means espescially, that every contributor maintains his or her own copy (or copies) of the ParMooN repository,
  which opens up nice perspectives of seperating "core code" from project specific "feature code". 
  How we want to achieve this is described \ref page_branching "on a seperate documentation page". \n
  
  \section extensions Mercurial extensions

  \subsection enabling Enabling extensions
  Every mercurial installation comes with a configuration file. It is named .hgrc,
  and when on Linux you should find it in your home directory. This is the place
  to customize your mercurial distribution. In particular this is where you can enable
  mercurial extensions.
  Extensions ship with mercurial, but are not consider core functionality for one
  reason or the other. Using them is an act of volition, and you have to enable them.

  In your .hgrc file, set the line
  \code
  [extensions]
  shelve =
  \endcode
  to enable e.g. the shelve extension. This allows the usage of the "hg shelve"
  command in all your local mercurial repositories. Other extensions can be enabled
  the same way - just list them under the [extensions] heading.
  Should you want to enable an extension only for a particular project, do the above
  in the projects .hg/hgrc file instead of in the global configuration file.

  \subsection shelve hg shelve

  The shelve extension is enabled by adding the line
  \code
    shelve =
  \endcode
  under the [extensions] heading in your global or local hgrc file.
  Note that you will have to run mercurial 2.8 or higher for the shelve extension to work.

  The shelve can be used to put aside uncommited changes in your working directory which you do not want to commit yet.
  Put uncommited changes aside with
  \code
    hg shelve
  \endcode
  and get them back to your working directory with
  \code
    hg unshelve
  \endcode
  Note that you can have more than one shelve and all your shelves have names. The default name is just the
  name of the branch you are currently working in (eventually with sequential numbers added, should you happen
  to have more than one shelve per branch). To shelve changes with a custom name, e.g. "bugfixes" run,
  \code  
    hg shelve --name bugfixes
  \endcode
  and unshelve these with 
  \code
    hg unshelve bugfixes
  \endcode
  
  The reasons for having uncommited changes in your working directory can be manifold.
  But to my best knowledge there are basically two situations when these are in your way. Those are
  
  \arg You want to switch between branches \n
  When you want to switch from branch A to branch B, the uncommited changes in your working
  directory get "rebased". This means, that their parent (e.g. the head of branch A) is replaced
  by the head of branch B. This rebasing is not always desirable nor feasible. Mercurial might just
  abort the update if there are uncommited changes (to force this aborting behavior run hg update
  with the option "-c"). To work around these problems you must either commit all of your changes
  or shelve them. It's up to you.
  
  
  \arg You want to merge some other changeset into your current working directory \n
  A merge gets always aborted if there are uncommited changes. So the workflow is:
  shelve, merge, unshelve.

\remarks The shelve extension can be used to move changesets between branches, but this is a delicate matter
and I suppose a lot of things could go wrong there. When e.g. the shelved changes from branch A refer to
a file which is not present in branch B it might be a bad idea to unshelve the branch A changes in branch B.

\remarks 
An alternative to using the shelve extension is storing the output of `hg diff`
in a file, then revert the changes, import them again later.
~~~~~~~~~~~~~~~
hg diff > mylocal_changes.txt
hg revert --all
hg import --no-commit mylocalchanges_default.txt
~~~~~~~~~~~~~~~
You can change the branch or merge before importing, but similar to the shelve
extension this is not always meaningful. It's up to you to know when it makes
sense. Also note that the command `hg revert` creates backup copies of the files
you want to revert. Since you already have such a backup in the file 
`mylocalchanges_default.txt`, you can avoid those extra backup files with the 
`-C` option.

Should you discover other situations where the shelve extension is useful or dangerous, please feel free to share them.


\subsection hg_strip hg strip
The strip extension is enabled by adding the line 
\code
strip =
\endcode
under the `[extensions]` heading in your global or local hgrc file. With this 
extension you can <b>remove commits and all of its descendants</b>. This will 
change the history of the repository so you should use it with great care. If 
anyone already has the commits you are trying to remove, it becomes very 
complicated. Try to avoid such situations!

Usage: You simply provide the revision number of the commit
\code
hg strip <REV>
\endcode
Be aware that this will remove the commits and you will not see them again. It 
might be safer to call
\code
hg strip --keep <REV>
\endcode
which will leave all the changes from the removed commits as local changes. 
This makes it possible to recombine several commits.

\remark In fact `hg strip` does store a backup in `.hg/strip-backup/` which you 
can use via `hg unbundle`. Search online for help if you need to.

One common work flow is the following: Image you worked hard and made a number 
of commits in your local repository. Now you would like others to pull from you 
to make your changes public. Before you do that you should pull from the main 
repository to check if you are up to date. If there are new commits, this will 
lead to separate heads in the default branch. You usually would merge and then 
ask others to pull. These separate heads can lead unnecessarily far away from a 
linear history and complicates many things. So you can do the following steps 
to keep the history neat (after you pulled from the main repository but before 
you tried to merge):
 - go to your first commit which is not in the main repository using `hg up`
 - call `hg strip --keep .` to remove all your commits and keep them as local 
   changes in the file system
 - shelve those local changes using `hg shelve` explained above
 - switch to the current head of the repository (there should be only the one 
   from the main repository now)
 - unshelve your changes
 - commit them again
 - ask others to pull from your repository with a really nice linear history!
One disadvantage is that the commit massages get lost during this process. This
is ok if you only have a few commits. Otherwise you should save those as well 
before calling `hg strip`. 


\subsection hg_transplant hg transplant
This extension is enabled through adding the line
\code
transplant =
\endcode
in your local or global `hgrc` file. It enables you to <b>move commits from one 
branch to another</b>. Check for its usage online and extend this documentation.
It is very nice in case you accidentally committed in the wrong branch. I don't 
know if it can be used to move commits within the same branch, which could be 
used to make the history more linear.

\subsection hg_rebase hg rebase
This extension is enabled through adding the line
\code
rebase =
\endcode
in your local or global `hgrc` file. This seems to be the appropriate tool to 
linearize the history in case of two heads in the same branch. Basically this 
can replace a call to `hg merge` in some situations. 

\note Update (2018/11/13 Najib Alia): <b>Do not hesitate to use the option --keep
-branches with rebase!</b> It can often happen that the commits you want to rebase
have been already used in other of your branches. In this case, using:
\code
hg rebase --keep-branches -s ... -d ...
\endcode
ensures that the other branches are NOT moved/merged to the branch you are 
rebasing on. <b>It is recommended to make this command your default one when
rebasing!</b>


\section merge_issues Possible problems during merging

First of all: Do not wait with your merge too long. The longer you wait the 
harder it might be. It is easiest to merge for example the default branch 
into your own branch every day or so. 

If you do a merge make sure that the merge commit is of any use, i.e., that all 
tests pass! That means call `make check` before you commit the merge.

\subsection missing_feature_for_merge I miss a feature to successfully merge
Image you are in the following situation. You entered `hg merge default` to 
merge the default branch into yours, which you are currently in. For some 
reason you miss, say, another constructor in some class in the default branch 
to successfully complete the merge. This extra constructor should of course be 
a separate commit. Since you already started merging you can't directly commit
into the default branch. Here is what you can do. 
 - Save what you already have done during the merge, e.g. saving the output of 
   `hg diff` into some file as described in the above remark (possibly restrict 
   the command to some files only, e.g. those in the directory `user_projects/`)
 - undo the not yet committed merge via `hg update --clean .`
 - return into the default branch, `hg up default`
 - implement the new constructor, write a test for it and commit
 - change back into your branch and restart the merge
 - load the saved file with your work starting the merge
 - finish the merge and commit



 */


